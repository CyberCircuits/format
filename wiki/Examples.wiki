#summary Further examples of the format library

= Introduction =

The ReadMe page describes in detail the functionality that the `format` library provides.  This page provides illustrations of the additional features provided by `format` that extend the base C99-compatible functionality.


= Binary Conversion = 

The `b` conversion specification formats the unsigned integer argument into a binary base-2 number.  For example

{{{
n = format( cons, "GPIO = %8.8b", 37 );
}}}

would send to the `cons` function the characters representing the output

{{{
GPIO = 00100101
}}}

= Continuation Conversion Specifier =

A recent addition to the `format` library is the continuation conversion specification.  Notionally it is written `%"`, in practice you place a `%` as the last character in a format string and `format` will continue parsing the format specification from the string pointed to by the next argument.

What does this mean in practice?  Here is an illustration of the problem this solves: to print out the contents of three elements of a structure:

{{{
struct {
   unsigned int acc;   /* Accumulator */
   unsigned int x;     /* X-register  */
   unsigned int y;     /* Y-register  */

   /* other stuff ... */

} cpu;

/* ... */

format( cons, "A = %#!8.8X, X = %#!8.8X, Y = %#!8.8X", cpu.acc, cpu.x, cpu.y );
}}}

I think it looks ugly - there is no easy visual connection between the conversion specifiers and their corresponding arguments.

With continuation this takes on a more natural look, allowing format specifications and arguments to be interspersed, much like in languages like Java and C++:

{{{
format( cons, "A = %#!8.8X, %", cpu.acc, 
              "X = %#!8.8X, %", cpu.x, 
              "Y = %#!8.8X",    cpu.y );
}}}